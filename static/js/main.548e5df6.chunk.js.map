{"version":3,"sources":["components/CityContainer.js","components/WeatherInfoContainer.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherLogo","styled","img","ChooseCityLabel","span","SearchBox","form","CityContainer","props","updateCity","fetchWeather","src","onSubmit","onChange","e","target","value","placeholder","type","WeatherInfoIcons","sunset","sunrise","humidity","wind","pressure","WeatherContainer","div","Condition","WeatherIcon","Location","WeatherInfoLabel","WeatherInfoContainer","InfoContainer","InfoIcon","InfoLabel","WeatherInfoComponent","name","WeatherComponent","timeStamp","weather","isDay","icon","includes","Math","floor","main","temp","description","WeatherIcons","sys","country","Date","getHours","getMinutes","speed","Container","AppLabel","App","useState","city","updateWeather","a","preventDefault","axios","get","response","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.548e5df6.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst WeatherLogo = styled.img`\n  width: 140px;\n  height: 140px;\n  margin: 40px auto;\n`;\n\nconst ChooseCityLabel = styled.span`\n  color: black;\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nconst SearchBox = styled.form`\n  display: flex;\n  flex-direction: row;\n  border: black solid 0.5px;\n  border-radius: 2px;\n  color: black;\n  font-size: 18px;\n  font-weight: bold;\n  margin: 20px auto;\n  & input {\n    padding: 10px;\n    font-size: 14px;\n    border: none;\n    outline: none;\n  }\n  & button {\n    padding: 10px;\n    font-size: 14px;\n    color: white;\n    background-color: #556270;\n    border: none;\n    outline: none;\n    cursor: pointer;\n    transition-duration: 0.2s;\n  }\n`;\n\nconst CityContainer = (props) => {\n  const { updateCity, fetchWeather } = props;\n\n  return (\n    <>\n      <WeatherLogo src={\"/weather-app/icons/perfect-day.svg\"} />\n      <ChooseCityLabel>Find weather of your city</ChooseCityLabel>\n      <SearchBox onSubmit={fetchWeather}>\n        <input\n          onChange={(e) => updateCity(e.target.value)}\n          placeholder=\"City\"\n        />\n        <button type={\"submit\"}>Search</button>\n      </SearchBox>\n    </>\n  );\n};\n\nexport default CityContainer;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { WeatherIcons } from \"../App\";\n\nexport const WeatherInfoIcons = {\n  sunset: \"/weather-app/icons/temp.svg\",\n  sunrise: \"/weather-app/icons/temp.svg\",\n  humidity: \"/weather-app/icons/humidity.svg\",\n  wind: \"/weather-app/icons/wind.svg\",\n  pressure: \"/weather-app/icons/pressure.svg\",\n};\n\nconst WeatherContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n  justify-content: space-between;\n  margin: 30px auto;\n`;\nconst Condition = styled.span`\n  margin: 20px auto;\n  font-size: 14px;\n  text-transform: capitalize;\n  & span {\n    font-size: 28px;\n  }\n`;\nconst WeatherIcon = styled.img`\n  width: 100px;\n  height: 100px;\n  margin: 5px auto;\n`;\nconst Location = styled.span`\n  font-size: 28px;\n  text-transform: capitalize;\n  font-size: 28px;\n`;\nconst WeatherInfoLabel = styled.span`\n  margin: 20px 25px 10px;\n  text-transform: capitalize;\n  text-align: start;\n  width: 90%;\n  font-weight: bold;\n  font-size: 14px;\n`;\nconst WeatherInfoContainer = styled.div`\n  display: flex;\n  width: 90%;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: center;\n  flex-wrap: wrap;\n`;\nconst InfoContainer = styled.div`\n  display: flex;\n  margin: 5px 10px;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: center;\n`;\nconst InfoIcon = styled.img`\n  width: 36px;\n  height: 36px;\n`;\nconst InfoLabel = styled.span`\n  display: flex;\n  flex-direction: column;\n  font-size: 14px;\n  margin: 15px;\n  & span {\n    font-size: 12px;\n    text-transform: capitalize;\n  }\n`;\n\nconst WeatherInfoComponent = (props) => {\n  const { name, value } = props;\n  return (\n    <InfoContainer>\n      <InfoIcon src={WeatherInfoIcons[name]} />\n      <InfoLabel>\n        {value}\n        <span>{name}</span>\n      </InfoLabel>\n    </InfoContainer>\n  );\n};\n\nconst WeatherComponent = (props) => {\n  const { weather } = props;\n  const isDay = weather?.weather[0].icon?.includes(\"d\");\n  const getTime = (timeStamp) => {\n    return `${new Date(timeStamp * 1000).getHours()} : ${new Date(\n      timeStamp * 1000\n    ).getMinutes()}`;\n  };\n\n  return (\n    <>\n      <WeatherContainer>\n        <Condition>\n          <span>{`${Math.floor(weather?.main?.temp - 273)}Â°C`}</span>\n          {`  |  ${weather?.weather[0].description}`}\n        </Condition>\n        <WeatherIcon src={WeatherIcons[weather?.weather[0].icon]} />\n      </WeatherContainer>\n      <Location>{`${weather?.name}, ${weather?.sys?.country}`}</Location>\n\n      <WeatherInfoLabel>Weather Info</WeatherInfoLabel>\n      <WeatherInfoContainer>\n        <WeatherInfoComponent\n          name={isDay ? \"sunset\" : \"sunrise\"}\n          value={`${getTime(weather?.sys[isDay ? \"sunset\" : \"sunrise\"])}`}\n        />\n        <WeatherInfoComponent\n          name={\"humidity\"}\n          value={weather?.main?.humidity}\n        />\n        <WeatherInfoComponent name={\"wind\"} value={weather?.wind?.speed} />\n        <WeatherInfoComponent\n          name={\"pressure\"}\n          value={weather?.main?.pressure}\n        />\n      </WeatherInfoContainer>\n    </>\n  );\n};\n\nexport default WeatherComponent;\n","import CityContainer from \"./components/CityContainer\";\nimport WeatherComponent from \"./components/WeatherInfoContainer\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\n\nconst apiKey = \"94b8d31f0e653577c42eb845012d6153\";\n\nexport const WeatherIcons = {\n  \"01d\": \"/weather-app/icons/sunny.svg\",\n  \"01n\": \"/weather-app/icons/night.svg\",\n  \"02d\": \"/weather-app/icons/day.svg\",\n  \"02n\": \"/weather-app/icons/cloudy-night.svg\",\n  \"03d\": \"/weather-app/icons/cloudy.svg\",\n  \"03n\": \"/weather-app/icons/cloudy.svg\",\n  \"04d\": \"/weather-app/icons/perfect-day.svg\",\n  \"04n\": \"/weather-app/icons/cloudy-night.svg\",\n  \"09d\": \"/weather-app/icons/rain.svg\",\n  \"09n\": \"/weather-app/icons/rain-night.svg\",\n  \"10d\": \"/weather-app/icons/rain.svg\",\n  \"10n\": \"/weather-app/icons/rain-night.svg\",\n  \"11d\": \"/weather-app/icons/storm.svg\",\n  \"11n\": \"/weather-app/icons/storm.svg\",\n  \"50d\": \"/weather-app/icons/haze.svg\",\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 350px;\n  padding: 20px 10px;\n  margin: auto;\n  border-radius: 30px;\n  box-shadow: 0 3px 6px 0 #555;\n  background: white;\n  font-family: Montserrat;\n`;\n\nconst AppLabel = styled.span`\n  color: black;\n  margin: 20px auto;\n  font-size: 25px;\n  font-weight: bold;\n`;\n\nfunction App() {\n  const [city, updateCity] = useState();\n  const [weather, updateWeather] = useState();\n\n  const fetchWeather = async (e) => {\n    e.preventDefault();\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`\n    );\n    updateWeather(response.data);\n  };\n\n  return (\n    <Container>\n      <AppLabel>Weather</AppLabel>\n      {city && weather ? (\n        <WeatherComponent weather={weather} city={city} />\n      ) : (\n        <CityContainer updateCity={updateCity} fetchWeather={fetchWeather} />\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}